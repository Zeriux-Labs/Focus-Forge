<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Focus Forge</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: "Segoe UI", sans-serif;
    }

    body {
      background-color: #f4f6f8;
      color: #333;
      width: 320px;
      padding: 16px;
    }

    .container {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .title {
      font-size: 1.5em;
      text-align: center;
      color: #2c3e50;
    }

    .section {
      background: #fff;
      padding: 12px;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }

    h2 {
      font-size: 1.1em;
      margin-bottom: 10px;
    }

    input[type="text"] {
      width: 100%;
      padding: 6px;
      border: 1px solid #ccc;
      border-radius: 6px;
      margin-top: 5px;
      margin-bottom: 5px;
    }

    button {
      width: 100%;
      background-color: #2ecc71;
      color: white;
      border: none;
      padding: 8px;
      border-radius: 6px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    button:hover {
      background-color: #27ae60;
    }

    .block-list {
      list-style: none;
      max-height: 100px;
      overflow-y: auto;
      padding-left: 0;
      margin-bottom: 10px;
    }

    .block-list li {
      display: flex;
      justify-content: space-between;
      padding: 5px;
      border-bottom: 1px solid #eee;
    }

    .block-list li button {
      background-color: #e74c3c;
      width: auto;
      padding: 4px 8px;
      font-size: 0.9em;
    }

  </style>
</head>
<body>
  <div class="container">
    <h1 class="title">Focus Forge</h1>

    <section class="section">
      <h2>Distraction Blocker</h2>
      <ul class="block-list" id="blockList"></ul>
      <input type="text" id="blockInput" placeholder="Add site (e.g. youtube.com)" />
      <button id="addBlockBtn">Add</button>
    </section>
  </div>

  <script>
    const blockInput = document.getElementById("blockInput");
    const addBlockBtn = document.getElementById("addBlockBtn");
    const blockList = document.getElementById("blockList");

    let blockedSites = [];

    function renderList() {
      blockList.innerHTML = "";
      blockedSites.forEach((site, index) => {
        const li = document.createElement("li");
        li.textContent = site;

        const removeBtn = document.createElement("button");
        removeBtn.textContent = "âœ•";
        removeBtn.onclick = () => removeSite(index);

        li.appendChild(removeBtn);
        blockList.appendChild(li);
      });
    }

    function updateRules() {
      const rules = blockedSites.map((site, index) => ({
        id: index + 1,
        priority: 1,
        action: { type: "block" },
        condition: {
          urlFilter: site,
          resourceTypes: ["main_frame"]
        }
      }));

      chrome.declarativeNetRequest.updateDynamicRules({
        removeRuleIds: blockedSites.map((_, i) => i + 1),
        addRules: rules
      });
    }

    function saveSites() {
      chrome.storage.sync.set({ blockedSites });
      updateRules();
    }

    function addSite() {
      const site = blockInput.value.trim();
      if (!site || blockedSites.includes(site)) return;
      blockedSites.push(site);
      blockInput.value = "";
      renderList();
      saveSites();
    }

    function removeSite(index) {
      blockedSites.splice(index, 1);
      renderList();
      saveSites();
    }

    addBlockBtn.addEventListener("click", addSite);

    // Load on start
    chrome.storage.sync.get(["blockedSites"], (data) => {
      blockedSites = data.blockedSites || ["instagram.com"]; // Preload Instagram
      renderList();
      saveSites(); // Ensure rules apply
    });
  </script>
</body>
</html>
